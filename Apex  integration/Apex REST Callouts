------------------------------------AnimalLocator class--------------------------------------------------

public class AnimalLocator {
    public static string getAnimalNameById(integer Id){
    
    //Http Callouts basically work with three classes :  Http, HttpRequest and Http Response.
    
    // Initiate a new http class. Use this class to initiate an HTTP request and response.
    
        Http http = new Http();
        
    // Initiate a request class .Use this class to programmatically create HTTP requests like GET, POST, PATCH, PUT, and DELETE.
    
        HttpRequest request = new HttpRequest();
        
     // Each Http Request shall have an ENDPoint and a Method.
     
        request.setEndpoint('https://th-apex-http-callout.herokuapp.com/animals/'+Id);
        request.setMethod('GET');
        
     // now lets use Http Response class,this class is used to handle the HTTP response returned by HTTP
     
        HttpResponse response = http.send(request);
        
     // The response will generally be in a Json format and it is essentially a string so lets convert it into an object.
        
       
            Map<String, Object> result = (Map<String, Object>)JSON.deserializeUntyped(response.getBody());
            Map<String, Object> animal = (Map<String, Object>)result.get('animal');
            String name = String.valueOf(animal.get('name'));
            system.debug(name);
            return name;
        } 
            
    }

--------------------------------AnimalLocatorMock----------------------------------------------------------
// Apex method doesnot support callouts so we will need to create a mock result to write the test classes for these classes
and these will mock classes will implement HttpcalloutMock interface




@isTest
global class AnimalLocatorMock implements HttpCalloutMock {
    // Implement this interface method
    // response thatâ€™s returned is what you specified in the respond method of the mock implementation.
    global HTTPResponse respond(HTTPRequest request) {
        // Create a fake response
        HttpResponse response = new HttpResponse();
        response.setHeader('Content-Type', 'application/json');
        response.setBody('{"animal": {"id": 1, "name":"moose", "eats": "plants", "says":"bellows"}}');
        response.setStatusCode(200);
        return response; 
    }
}

-----------------------------AnimalLocatorTest-------------------------------------------------------------

@isTest
public class AnimalLocatorTest {
    
    @isTest
    static void animallocatorTest1(){
        
   // Set mock callout class 
    	Test.setMock(HttpCalloutMock.class, new AnimalLocatorMock()); 
   // first argument shall be HttpCalloutMock.class and second argument shall be the initialization of mock class to be used.
        String actual = AnimalLocator.getAnimalNameById(1);
        String expected = 'moose';
        //System.assertEquals(200, response.getStatusCode());
        System.assertEquals(actual, expected);
    
    }
    
}
